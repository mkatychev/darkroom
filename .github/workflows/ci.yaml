name: build
on:
  pull_request:
  push:
    branches:
      - master
      - dev
env:
  CARGO_TERM_COLOR: always
jobs:
  rustfmt:
    name: rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with: # use nightly rustfmt rules
          toolchain: nightly
          override: true
          profile: minimal
          components: rustfmt
      # from stable toolchain:
      # cargo +nightly fmt --all
      - run: cargo fmt --all -- --check
  test:
    name: test
    env:
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - run: cargo test --verbose --workspace
  examples:
    name: examples
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: httpbin post
        run: cargo run -- record ./test_data post
      - name: httpbin take
        run: cargo run -- take ./test_data/post.01s.body.fr.json
      - name: httpbin vrecord
        run: cargo run -- vrecord ./test_data/post.vr.json
      - name: httpbin vrecord alt
        run: cargo run -- vrecord ./test_data/alt_post.vr.json
  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal
          components: clippy
      - run: cargo clippy --all
  release:
    needs: [test]
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        features: [all-features, no-default-features]
        include:
          - features: all-features
            feat-arg: ""
            feat-archive: ""
          - features: no-default-features
            feat-arg: --no-default-features
            feat-archive: -no-default-features
          - os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-musl
            bin: dark
          - os: windows-latest
            rust: stable
            target: x86_64-pc-windows-msvc
            bin: dark.exe
          - os: macOS-latest
            rust: stable
            target: x86_64-apple-darwin
            bin: dark
    runs-on: ${{ matrix.os }}
    steps:
      - name: Get the tag name
        run: echo "TAG=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
      - name: Setup Rust
        uses: hecrj/setup-rust-action@master
        with:
          rust-version: ${{ matrix.rust }}
      - name: Configure Rustup
        run: rustup target add ${{ matrix.target }}
      - name: Checkout
        uses: actions/checkout@v1
      - name: Build
        run: cargo build --release ${{ matrix.feat-arg }} --target ${{ matrix.target }}
      - name: Package
        shell: bash
        run: |
          strip target/${{ matrix.target }}/release/${{ matrix.bin }}
          cd target/${{ matrix.target }}/release
          if [[ "${{ matrix.os }}" == "windows-latest" ]]
          then
            7z a ../../../darkroom-${{ env.TAG }}${{ matrix.feat-archive }}-${{ matrix.target }} ${{ matrix.bin }}
          else
            tar czvf ../../../darkroom-${{ env.TAG }}${{ matrix.feat-archive }}-${{ matrix.target }} ${{ matrix.bin }}
          fi
          cd -
      - name: Publish
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: "dark*"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
